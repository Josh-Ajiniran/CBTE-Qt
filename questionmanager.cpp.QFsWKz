#include "questionmanager.h"
#include "ui_questionmanager.h"

#include <QtSql>
#include <QMessageBox>
#include <QFileDialog>
#include <QStandardPaths>
#include <QFile>

bool QuestionManager::validator()
{   
    if (ui->fileChoiceLbl->text().isEmpty()) {
        QMessageBox::warning(this, tr("No file chosen"),
                             tr("You have not entered some fields correctly. "
                                "There might be problem committing them!"));
        ui->selectFileBtn->setFocus();
        return false;
    }
    if (ui->nQuestions->value() < 1) {
        QMessageBox::warning(this, tr("Invalid form field"),
                             tr("You have not entered some fields correctly. "
                                "There might be problem committing them!"));
        ui->nQuestions->setFocus();
        return false;
    }
    if (ui->nTime->text() == "00:00") {
        QMessageBox::warning(this, tr("Invalid form field"),
                             tr("You have not entered some fields correctly. "
                                "There might be problem committing them!"));
        ui->nTime->setFocus();
        return false;
    }
    
    return true;
}

void QuestionManager::initializer()
{
    ui->subjectList->clear();
    
    model->setQuery("SELECT name, id FROM subjects ORDER BY id ASC");
    for (int i = 0; i < model->rowCount(); ++i) {
        QString itemData = model->record(i).value("name").toString() + " " +
                model->record(i).value("id").toString();
        ui->subjectList->addItem(itemData);
    }
    
    ui->resetBtn->click();
}

QuestionManager::QuestionManager(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::QuestionManager)
{
    ui->setupUi(this);
    ui->candidatesView->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    ui->adminStackedWidget->setCurrentIndex(0);
    
    
    QSqlDatabase::database("db", true);
    
    // populate question list from db for admin
    model = new QSqlQueryModel(this);
    
    // model for widget mapper
    sModel = new EditableSqlQueryModel(this);
    
    // instantiate data widget mapper
    mapper = new QDataWidgetMapper;
    
    // populate candidate list from db for admin
    cModel = new QSqlTableModel(this);
    cModel->setTable("users");
    cModel->setFilter("isAdmin=0");
    cModel->select();
    ui->candidatesView->setModel(cModel);
    ui->candidatesView->hideColumn(0);
    
    initializer();
}

QuestionManager::~QuestionManager()
{
    delete ui;
}

void QuestionManager::setAdminName(QString txt)
{
    ui->adminNameLbl->setText("Welcome, " + txt);
}

void QuestionManager::on_commitBtn_clicked()
{
    // call validation function
    if (!validator())
        return;
    
    QString subject_name = ui->fileChoiceLbl->text().section('/', -1).section('.', 0, 0);
    QString subject_path = ui->fileChoiceLbl->text();
    int no_of_questions = ui->nQuestions->value();
    QString allocated_time = ui->nTime->text();
    
    // make changes to the database
    QSqlQuery query;
    query.prepare("INSERT INTO subjects (name, file_path, no_of_questions, time_allocated) "
                  "VALUES (?, ?, ?, ?)");
    query.addBindValue(subject_name);
    query.addBindValue(subject_path);
    query.addBindValue(no_of_questions);
    query.addBindValue(allocated_time);
    if (query.exec())
        QMessageBox::information(this, tr("Successfully commited!"), 
                                 tr("The subject details have been saved! Go ahead to "
                                    "start editing."));
    else
        qDebug() << query.lastError().text();
    
    ui->commitBtn->setEnabled(false);
    initializer();
    ui->subjectList->setCurrentIndex(ui->subjectList->count() - 1);
    ui->editFileBtn->setEnabled(true);
    ui->editFileBtn->setFocus();
}

void QuestionManager::on_selectFileBtn_clicked()
{
    QString fileName = QFileDialog::getSaveFileName(this, tr("Open or create a question file"), 
                                                    "/home/projosh",
                                                    "All Files (*) ;; JSON files (*.json *.txt *.xml)");
    if (fileName != "") {
        QFile file(QFileInfo(fileName).absoluteFilePath());
        if (file.exists()) {
            QMessageBox::StandardButton chosenButton = 
                    QMessageBox::warning(this, tr("File exists"), tr("The file already exists. Do you want to overwrite it?"), QMessageBox::Ok | QMessageBox::Cancel);
            
            if (chosenButton == QMessageBox::Ok)
                return;
        }
        
        if (!file.open(QIODevice::ReadWrite)) {
            QMessageBox::critical(this, tr("Error"), tr("Failed to save file"));
            return;
        }
    }
    
    ui->fileChoiceLbl->setText(fileName);
}

void QuestionManager::on_editFileBtn_clicked()
{   
    if (validator()) {
        ui->currentSubjectLbl->setText("Subject: " + ui->subjectList->currentText());
        ui->adminStackedWidget->setCurrentWidget(ui->questionAnswerPage);
        ui->editFileBtn->setEnabled(false);
    } else {
        QMessageBox::critical(this, tr("Incomplete Field"), 
                              tr("Some fields are not correctly filled!"));
        return;
    }
}
    
void QuestionManager::on_resetBtn_clicked()
{
    ui->subjectList->setEnabled(true);
    ui->subjectList->setCurrentIndex(-1);
    ui->nQuestions->setValue(0);
    ui->nTime->clear();
    ui->commitBtn->setEnabled(false);
    ui->editFileBtn->setEnabled(false);
}

void QuestionManager::on_subjectList_currentIndexChanged(const QString &arg1)
{
    ui->currentSubjectLbl->setText("Subject: ");
//    ui->fileChoiceLbl->clear();
    ui->currentSubjectLbl->setText("Subject: " + ui->subjectList->currentText());
    ui->commitBtn->setEnabled(false);
    ui->editFileBtn->setEnabled(true);
    
    // split arg1 into two i.e name and timestamp
    QString nm = arg1.section(" ", 0, 0);
    QString no = arg1.section(" ", 1);
    
    sModel->setQuery(QString("SELECT * FROM subjects WHERE name='%1' AND id='%2'").
                     arg(nm).arg(no));
    
    // mapping between data model and widgets
    mapper->setSubmitPolicy(QDataWidgetMapper::AutoSubmit);
    mapper->setModel(sModel);
    mapper->addMapping(ui->fileChoiceLbl, 2, "text");
    mapper->addMapping(ui->nQuestions, 3);
    mapper->addMapping(ui->nTime, 4);
    mapper->toFirst();
}

void QuestionManager::on_listWidget_currentTextChanged(const QString &currentText)
{
    if (currentText == "Subject and Timing")
        ui->adminStackedWidget->setCurrentIndex(0);
    else if (currentText == "Question and Answer")
        ui->adminStackedWidget->setCurrentIndex(1);
    else
        ui->adminStackedWidget->setCurrentIndex(2);
}
